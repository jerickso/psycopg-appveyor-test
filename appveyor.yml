version : 2.x.pre.{build}

clone_folder: C:\projects\psycopg
environment:
    global:
        # MSVC Express 2008's setenv.cmd failes if /E:ON and /V:ON are not
        # enabled in the batch script interpreter
        #
        #      WITH_COMPILER: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_compiler.cmd"
        CMD_IN_ENV: cmd /E:ON /V:ON /C .\appveyor\run_with_env.cmd

    matrix:
        # For Python versions available on Appveyor, see
        # http://www.appveyor.com/docs/installed-software#python

        - PYTHON: C:\Python27
          PYTHON_ARCH: 32
          # VS 2008
          VS_VER: 9.0
        - PYTHON: C:\Python33
          PYTHON_ARCH: 32
          # VS 2010
          VS_VER: 10.0
        - PYTHON: C:\Python34
          PYTHON_ARCH: 32
          # VS 2010
          VS_VER: 10.0
        - PYTHON: C:\Python35
          PYTHON_ARCH: 32
          # VS 2015
          VS_VER: 14.0
        - PYTHON: C:\Python36
          PYTHON_ARCH: 32
          # VS 2015
          VS_VER: 14.0
        - PYTHON: C:\Python27-x64
          PYTHON_ARCH: 64
          # VS 2008
          VS_VER: 9.0
        - PYTHON: C:\Python33-x64
          DISTUTILS_USE_SDK: '1'
          PYTHON_ARCH: 64
          # VS 2010
          VS_VER: 10.0
        - PYTHON: C:\Python34-x64
          DISTUTILS_USE_SDK: '1'
          PYTHON_ARCH: 64
          # VS 2010
          VS_VER: 10.0
        - PYTHON: C:\Python35-x64
          PYTHON_ARCH: 64
          # VS 2015
          VS_VER: 14.0
        - PYTHON: C:\Python36-x64
          PYTHON_ARCH: 64
          # VS 2015
          VS_VER: 14.0

      #Py27 = 9.0  (VS 2008)
      #Py 3.3,3.4 = 10.0 (VS 2010)
      #Py 3.5,3.6 = 14.0 (VS 2015)
    PSYCOPG2_TESTDB: psycopg2_test
    PSYCOPG2_TESTDB_USER: postgres
    PSYCOPG2_TESTDB_PASSWORD: Password12!
    PSYCOPG2_TESTDB_HOST: localhost
    PSYCOPG2_TESTDB_PORT: 5432

    PGUSER: postgres
    PGPASSWORD: Password12!


matrix:
    fast_finish: false

services:
    - postgresql95

branches:
    only:
        - maint_2_6
cache:
  - C:\Others -> cache.rebuild

# Scripts called before repo cloning
init:
    # Uncomment next line to get RDP access during the build.
    #- ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

    - ECHO "Filesystem root:"
    - ps: "ls C:/"

    - ECHO "Installed SDKs:"
    - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

    - ECHO "Installed Python Versions"
    - ps: "ls C:/Python*"

    - ECHO "Installed PostgreSQL Versions"
    - ps: "ls \"C:/Program Files/PostgreSQL/*\""

    # Set Python to the path
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%
    - "%PYTHON%\\python -c \"import os, pprint;  pprint.pprint(sorted(os.environ.items()))\""

    # Verify Python version and architecture
    - "%PYTHON%\\python --version"
    #    - "%PYTHON%\\python -c \"import sys; print sys.maxsize > 2**32\""
    #    - SET ARCH64 %PYTHON%\\python -c "import sys; print sys.maxsize > 2**32"

    # Get & Install NASM
    #- curl -L -o nasminst.exe http://www.nasm.us/pub/nasm/releasebuilds/2.12.02/win64/nasm-2.12.02-installer-x64.exe && start /wait nasminst.exe /S
    #- SET PATH="C:\Program Files (x86)\nasm;%PATH%"

    # Fix problem with VS2008 Express and 64bit builds
    - COPY "C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\bin\\vcvars64.bat" "C:\\Program Files (x86)\\Microsoft Visual Studio 9.0\\VC\\bin\\amd64\\vcvarsamd64.bat"

    # Fix problem with VS2010 Express 64bit missing vcvars64.bat
    - curl -fsSL -o "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\amd64\\vcvars64.bat" https://raw.githubusercontent.com/jerickso/psycopg-appveyor/master/vcvars64.bat

    # Setup the compiler based upon version and architecture
    - IF "%PYTHON_ARCH%"=="32" (CALL "C:\\Program Files (x86)\\Microsoft Visual Studio %VS_VER%\\VC\\vcvarsall.bat" x86)
    - IF "%PYTHON_ARCH%"=="64" (CALL "C:\\Program Files (x86)\\Microsoft Visual Studio %VS_VER%\\VC\\vcvarsall.bat" amd64)


# Repository gets cloned, Cache is restored
install:
    # We start off CD'ed to cloned folder
    - SET BASE_DIR=C:\Others\%PYTHON_ARCH%\%VS_VER%
    - SET BUILD_DIR=%BASE_DIR%\Builds
    - IF NOT EXIST %BUILD_DIR% MKDIR %BUILD_DIR%

    - ECHO Initial Variables
    - ECHO %BASE_DIR%
    - ECHO %BUILD_DIR%

    #    - If (!(Test-Path -Path "C:\\Others\\%PYTHON_ARCH%\\%VS_VER%" ) {
    #}

    # Build OpenSSL Libraries
    - SET OPENSSLTOP=%BASE_DIR%\openssl
    - IF NOT EXIST %OPENSSLTOP%\include\openssl MKDIR %OPENSSLTOP%\include\openssl
    - IF NOT EXIST %OPENSSLTOP%\lib MKDIR %OPENSSLTOP%\lib

    # Setup OpenSSL Environment Variables based on Architecture
    - ps: >-
        If ($env:PYTHON_ARCH -Match "32" ) {
            $env:VCVARS_PLATFORM="x86"
            $env:TARGET="VC-WIN32"
            $env:DO="do_ms"
        } Else {
            $env:VCVARS_PLATFORM="amd64"
            $env:TARGET="VC-WIN64A"
            $env:DO="do_win64a"
            $env:CPU="AMD64"
        }
    # Download OpenSSL source
    - CD C:\Others
    - IF NOT EXIST OpenSSL_1_0_2k.tar.gz (
        appveyor DownloadFile https://github.com/openssl/openssl/archive/OpenSSL_1_0_2k.tar.gz
      )

    # To use OpenSSL >= 1.1.0, both libpq and psycopg build environments have to
    #   support the new library names.  Below are commands to build OpenSSL
    #   1.1.0:
    #    - mkdir _build
    #    - cd _build
    #    - perl ..\Configure %TARGET% no-asm no-shared --prefix=%BASE_DIR%\openssl --openssldir=%BASE_DIR%\openssl
    #    - nmake build_libs install_dev
    - IF NOT EXIST %OPENSSLTOP%\lib\ssleay32.lib (
        CD %BUILD_DIR% &&
        7z x C:\Others\OpenSSL_1_0_2k.tar.gz -so | 7z x -si -ttar > nul &&
        ECHO Build Directory Contents
        DIR &&
        CD openssl-OpenSSL_1_0_2k &&
        perl Configure %TARGET% no-asm no-shared no-zlib --prefix=%OPENSSLTOP% --openssldir=%OPENSSLTOP% &&
        CALL ms\%DO% &&
        nmake -f ms\nt.mak init headers lib &&
        COPY inc32\openssl\*.h %OPENSSLTOP%\include\openssl &&
        COPY out32\*.lib %OPENSSLTOP%\lib &&
        CD %BASE_DIR% &&
        RMDIR /S /Q %BUILD_DIR%\openssl-OpenSSL_1_0_2k
      )

    # Build PostgreSQL Librarires
    - SET PGTOP=%BASE_DIR%\postgresql
    - IF NOT EXIST %PGTOP%\include MKDIR %PGTOP%\include
    - IF NOT EXIST %PGTOP%\lib MKDIR %PGTOP%\lib
    # Download PostgreSQL source
    - CD C:\Others
    - IF NOT EXIST postgresql-9.6.1.tar.gz (
        appveyor DownloadFile https://ftp.postgresql.org/pub/source/v9.6.1/postgresql-9.6.1.tar.gz
      )

    # Setup build config file (config.pl)
    # Build libpgport first
    # Build libpq
    # Cannot 'set' variables inside the IF
    - SET PGBUILD=%BUILD_DIR%\postgresql-9.6.1
    - IF NOT EXIST %PGTOP%\lib\libpq.lib (
        CD %BUILD_DIR% &&
        7z x C:\Others\postgresql-9.6.1.tar.gz -so | 7z x -si -ttar > nul &&
        ECHO Build Directory Contents
        DIR &&
        CD postgresql-9.6.1\src\tools\msvc &&
        ECHO $config-^>{ldap} = 0; > config.pl &&
        ECHO $config-^>{openssl} = "%OPENSSLTOP:\=\\%"; >> config.pl &&
        ECHO.>> config.pl &&
        ECHO 1;>> config.pl &&
        build libpgport &&
        XCOPY /E ..\..\include %PGTOP%\include &&
        DIR %PGBUILD% &&
        COPY %PGBUILD%\Release\libpgport\libpgport.lib %PGTOP%\lib &&
        CD ..\..\interfaces\libpq &&
        nmake -f win32.mak USE_OPENSSL=1 ENABLE_THREAD_SAFETY=1 SSL_INC=%OPENSSLTOP%\include  SSL_LIB_PATH=%OPENSSLTOP%\lib config .\Release\libpq.lib &&
        COPY *.h %PGTOP%\include &&
        COPY Release\libpq.lib %PGTOP%\lib &&
        CD %BASE_DIR% &&
        RMDIR /S /Q %PGBUILD%
      )


    # We need wheel installed to build wheels
    - "%PYTHON%\\python.exe -m pip install --upgrade pip"
    - "%PYTHON%\\python.exe -m pip install wheel"


build: off

#before_build:
build_script:  # Cache is saved before build is finished
    # Add PostgreSQL binaries to the path
    - PATH=C:\Program Files\PostgreSQL\9.5\bin\;%PATH%
    - DIR C:\projects\psycopg

    - CD C:\projects\psycopg\psycopg2

    # Update the psycopg2 submodule
    - git submodule update --init --recursive

    - "%PYTHON%\\python.exe setup.py build_ext --have-ssl -l libpgcommon -L %OPENSSLTOP%\\lib;%PGTOP%\\lib -I %OPENSSLTOP%\\include;%PGTOP%\\include bdist_wininst bdist_wheel"
    - "%PYTHON%\\python.exe setup.py install"

#after_build:

before_test:
    # PostgreSQL
    - createdb %PSYCOPG2_TESTDB%

test_script:
    - "%PYTHON%/Scripts/pip.exe --version"
    #  - "build.cmd %PYTHON%\\python.exe setup.py test"
    - cd \
    - "%PYTHON%\\python.exe -c \"from psycopg2 import tests; tests.unittest.main(defaultTest='tests.test_suite')\" --verbose"

after_test:
    - cd C:\projects\psycopg\psycopg2
    - dir dist

artifacts:
    # bdist_wheel puts your built wheel in the dist directory
    - path: psycopg2\dist\*.whl
      name: wheel

deploy: off
#before_deploy:
#deploy_script:
#after_deploy:

#deployment_success: # Webhooks
#on_success: # Scripts
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
#    - "echo [pypi] > %USERPROFILE%\\.pypirc"
#    - "echo repository=https://pypi.python.org/pypi >> %USERPROFILE%\\.pypirc"
#    - "echo username: %PYPIUSER% >> %USERPROFILE%\\.pypirc"
#    - "echo password: %PYPIPWD% >> %USERPROFILE%\\.pypirc"
#    - REM python setup.py sdist bdist_wheel upload

#build_failure: # Webhooks
#deployment_failure: # Webhooks
#on_failure: # Scripts


# Uncomment to enable RDP on build finish
on_finish:
  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

#notifications:
#  - provider: Email
#  - to:
#    - jerickso@stickpeople.com
#    on_build_success: false
#    on_build_failure: true
#    on_build_status_changed: true
